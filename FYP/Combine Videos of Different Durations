import os
import cv2
import stat

def combine_video_patches(dataset_path):
    for class_folder in os.listdir(dataset_path):
        class_path = os.path.join(dataset_path, class_folder)
        if os.path.isdir(class_path):
            for video_folder in os.listdir(class_path):
                video_folder_path = os.path.join(class_path, video_folder)
                if os.path.isdir(video_folder_path):
                    video_clips = []

                    # Collect all video parts
                    for video_file in sorted(os.listdir(video_folder_path)):
                        video_file_path = os.path.join(video_folder_path, video_file)
                        if video_file_path.endswith(('.mp4', '.avi', '.mov', '.mkv')):
                            video_clips.append(video_file_path)

                    # Combine video clips if there are multiple clips
                    if video_clips:
                        # Open the first video clip to get the frame size and fps
                        first_clip = cv2.VideoCapture(video_clips[0])
                        fps = first_clip.get(cv2.CAP_PROP_FPS)
                        width = int(first_clip.get(cv2.CAP_PROP_FRAME_WIDTH))
                        height = int(first_clip.get(cv2.CAP_PROP_FRAME_HEIGHT))
                        first_clip.release()

                        # Prepare the output video file with the folder name
                        output_file = os.path.join(video_folder_path, f"{class_folder}_{video_folder}.mp4")
                        fourcc = cv2.VideoWriter_fourcc(*'mp4v')
                        out = cv2.VideoWriter(output_file, fourcc, fps, (width, height))

                        # Loop through each video file and append to the output video
                        for video_path in video_clips:
                            cap = cv2.VideoCapture(video_path)
                            while cap.isOpened():
                                ret, frame = cap.read()
                                if not ret:
                                    break
                                out.write(frame)
                            cap.release()

                            # Release the video capture before deleting
                            if cap.isOpened():
                                cap.release()

                            # Change permissions before deletion (if necessary)
                            try:
                                os.chmod(video_path, stat.S_IWRITE)  # Grant write permission
                                os.remove(video_path)
                            except PermissionError as e:
                                print(f"PermissionError: {e} while deleting {video_path}")

                        # Release the output video writer
                        out.release()

if __name__ == "__main__":
    dataset_path = "Path to dateset Folder"
    
    combine_video_patches(dataset_path)
